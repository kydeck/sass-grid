@use "sass:math";
@use "sass:map";
@use "sass:list";
@use "sass:string";

$breakpoints: (
	"sm": 576px, 
	"md": 768px, 
	"lg": 992px, 
	"xl": 1200px
);

$screen-names: map.keys($breakpoints);
$screen-sizes: map.values($breakpoints); 


[class*=grid-] {
    display:grid;
}

// Generate grid styles
@for $i from 1 through list.length($screen-sizes) {
	// Base style
	.grid-#{$i} {
		grid-template-columns: repeater($i, "fr");
	}

	// Mobile-first screen-size scoped media queries
	@for $ii from 1 through list.length($screen-sizes) {
		$size: list.nth($screen-sizes, $ii);
		$name: list.nth($screen-names, $ii);

		@media screen and (min-width: $size) {
			.grid-#{$i}-#{$name} {
				grid-template-columns: repeater($i, "fr");
			}
		}
	}
}

/* =======================================================
Grid system gaps
========================================================== */

$gap-base: 3px;

@mixin grid-gap-class($multiplier) {
  [class*=grid-].gap-#{$multiplier} {
    grid-column-gap: get-gap-number($gap-base, $multiplier);
    grid-row-gap: get-gap-number($gap-base, $multiplier);
  }
}

@function get-gap-number($base-number, $multiplier) {
    $next-step: $base-number;

    @for $ii from 1 through $multiplier {
        $next-step: calc($next-step/1.5 + $next-step);
    }

    @return round-to-nearest-0-or-5($next-step);
}

@for $i from 1 through 5 {
  @include grid-gap-class($i);
}